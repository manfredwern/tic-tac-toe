(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))s(r);new MutationObserver(r=>{for(const i of r)if(i.type==="childList")for(const a of i.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&s(a)}).observe(document,{childList:!0,subtree:!0});function t(r){const i={};return r.integrity&&(i.integrity=r.integrity),r.referrerPolicy&&(i.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?i.credentials="include":r.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function s(r){if(r.ep)return;r.ep=!0;const i=t(r);fetch(r.href,i)}})();const u=[[1,2,3],[4,5,6],[7,8,9],[1,4,7],[2,5,8],[3,6,9],[1,5,9],[3,5,7]];class y{constructor(){this._players=[],this._currentPlayer={}}get currentPlayer(){return this._currentPlayer}set currentPlayer(e){this._currentPlayer=e}addPlayer(e){const t=this._players.length+1;this._players.push({name:e,className:"player"+t})}allPlayers(){return this._players}}const m=9;function p(){return Array.from({length:m},(n,e)=>({cellId:e+1,player:"",className:""}))}const v="div#board",o="div#cell";class f{constructor(){this.playingBoard=p(),this.boardCellsHTML=""}createBoard(){for(const e of this.playingBoard){let t=document.createElement("div");t.setAttribute("id","cell"+e.cellId),t.setAttribute("class","cell"),this.boardCellsHTML+=t.outerHTML}document.querySelector(v).innerHTML=this.boardCellsHTML}markBoardCell(e,t){t.classList.add("clicked"),t.classList.add(this.players.currentPlayer.className),this.playingBoard.map(s=>(s.cellId===e&&(s.player=this.players.currentPlayer.name,s.className=this.players.currentPlayer.className,this.lastAction=s,this.moveHistory.push(this.lastAction)),s))}unmarkBoardCell(e){this.playingBoard.map(t=>{if(t.cellId===e.cellId){let s=document.querySelector(o+t.cellId);s.classList.contains(e.className)&&s.classList.remove(e.className),s.classList.contains("clicked")&&s.classList.remove("clicked"),t.player="",t.className="",this.moveHistory=this.moveHistory.filter(r=>r!==e)}return t})}highlightWinBoardCells(e=[]){this.playingBoard.forEach(t=>{const s=e.includes(t.cellId),{className:r}=this.players.currentPlayer,i=r+"--"+(s?"win":"lose");document.querySelector(o+t.cellId).classList.add(i)})}}const g=(n,e)=>e.every(t=>n.includes(t)),c="div#cell",l="button#undo",E="div.game-status",d="pre#move-logs",L="X",C="O";class B extends f{constructor(){super(),this.lastAction={},this.moveHistory=[],this.hasWinner=!1,this.isFirstPlayerTurn=!0,this.players=new y,this.isLogs=!1,this.bind()}bind(){this.addCellClickEvents=this.addCellClickEvents.bind(this),this.addUndoClickEvent=this.addUndoButtonEvent.bind(this),this.startGame=this.startGame.bind(this),this.setCurrentPlayer=this.setCurrentPlayer.bind(this),this.checkForWinningPlayer=this.checkForWinningPlayer.bind(this),this.highlightWinBoardCells=this.highlightWinBoardCells.bind(this),this.onClickEvent=this.onClickEvent.bind(this),this.onUndoMove=this.onUndoMove.bind(this),this.endOfGame=this.endGame.bind(this)}initializeBoard(){this.createBoard(),this.addCellClickEvents(),this.addUndoButtonEvent(),this.disableUndoButton(!0),this.showLogs()}startGame(){this.players.addPlayer(L),this.players.addPlayer(C),this.setCurrentPlayer(),this.updateGameStatusBoard(`${this.players.currentPlayer.name} goes first`),this.updateMoveHistory()}addCellClickEvents(){for(const e of this.playingBoard)document.querySelector(c+e.cellId).addEventListener("click",this.onClickEvent)}removeCellClickEvents(){for(const e of this.playingBoard)document.querySelector(c+e.cellId).removeEventListener("click",this.onClickEvent)}onClickEvent(e){const t=e.target,s=parseInt(t.id.split(/[a-z]+/).pop());t.classList.contains("clicked")||this.hasWinner||(this.markBoardCell(s,t),this.disableUndoButton(!1),this.updateMoveHistory(this.lastAction),this.checkForWinningPlayer(this.players.currentPlayer.name),this.switchPlayerTurn(),this.updateNextPlayerStatus())}updateMoveHistory(){this.showLogs&&(document.querySelector(d).innerHTML=this.moveHistory.map(e=>JSON.stringify(e)).join(`
`))}addUndoButtonEvent(){document.querySelector(l).addEventListener("click",this.onUndoMove)}removeUndoButtonEvent(){document.querySelector(l).removeEventListener("click",this.onUndoMove)}onUndoMove(){this.moveHistory.length&&(this.unmarkBoardCell(this.lastAction),this.switchPlayerTurn(),this.updateNextPlayerStatus(),this.disableUndoButton(!0),this.updateMoveHistory())}disableUndoButton(e=!0){const t=document.querySelector(l);e?t.setAttribute("disabled",""):t.removeAttribute("disabled")}setCurrentPlayer(){const e=this.isFirstPlayerTurn?0:1;this.players.currentPlayer=this.players.allPlayers()[e]}switchPlayerTurn(){this.hasWinner||(this.isFirstPlayerTurn=!this.isFirstPlayerTurn,this.setCurrentPlayer())}updateNextPlayerStatus(){if(this.hasWinner)return;if(this.moveHistory.length===this.playingBoard.length){this.updateGameStatusBoard("It's a draw!"),this.endGame();return}const e=this.players.currentPlayer.name.match(/s$/)?"' turn":"'s turn";this.updateGameStatusBoard(this.players.currentPlayer.name+e)}checkForWinningPlayer(e){let t=this.playingBoard.filter(s=>s.player===e).map(s=>s.cellId);for(const s of u)if(g(t,s)){this.updateGameStatusBoard(`${e} wins!`),this.hasWinner=!0,this.highlightWinBoardCells(s),this.endGame();return}}updateGameStatusBoard(e=""){var s;const t=document.querySelector(E);(s=this.lastAction)!=null&&s.className||(t.className=t.classList.value.split(" ").shift()),t.classList.remove(this.lastAction.className+"-background"),t.classList.add(this.players.currentPlayer.className+"-background"),t.innerHTML=e}showLogs(){var e;this.isLogs||(e=document.querySelector(d))==null||e.classList.add("hidden")}endGame(){this.disableUndoButton(!0),this.removeCellClickEvents(),this.removeUndoButtonEvent()}}const b="Tic-Tac-Toe",P="Undo",T="New Game",S="button#new-game";document.querySelector("#app").innerHTML=`
<h1 class="game-title">${b}</h1>

<div class="game-status"></div>

<div id="board-container">
  <div id="board"></div>
</div>

<div id="game-control">
  <button id="undo" type="button">${P}</button>
  <button id="new-game" type="button">${T}</button>
</div>

<pre id="move-logs"></pre>
`;function h(){const n=new B;n.initializeBoard(),n.startGame()}window.onload=()=>{h(),document.querySelector(S).addEventListener("click",h)};
